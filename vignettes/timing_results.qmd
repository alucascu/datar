---
title: Timing Results
format: 
  html:
    toc: true
    html-math-method: mathjax

vignette: >
  %\VignetteIndexEntry{Timing Results}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

# Timing of Different Functions
This package includes several functions aimed at the estimation of two main parameters. The first, HLE1, computes the Hodges-Lehmann
estimator of location. While the second, HLE2, computes the Hodges-Lehmann estimator of shift. There are 2 implementations of each
of these functions, one based on the base-R function: `outer` and another based in a C++ file (namely using the function `nth_element()`).
Conventional wisdom would assume that the faster of these two implementations would be those based in C++. To put this to the test, 
we will run timings using multiple distribution with multiple sample sizes. 

```{r}
#| echo: true
library(datar)
library(tidyverse)

# Functions to make this easier
hle1_timing <- function(size_vec, rng_engine, num_it = 30){
  result <- data.frame()
  for(i in size_vec){
    for(j in seq_len(num_it)){
      x <- rng_engine(i, 5)
      outer_res <- as.data.frame(t(as.data.frame(system.time(outer_hle1(x))))) %>%
        select(1:3) %>% 
        cbind(data.frame(method = "outer", size = i))
      cpp_res <- as.data.frame(t(as.data.frame(system.time(cpp_hle1(x))))) %>% 
        select(1:3) %>% 
        cbind(data.frame(method = "C++", size = i))
      results <- rbind(outer_res, cpp_res)
      result <- rbind(result, results)
    }
  }
  return(result)
}

hle2_timing <- function(size_vec, rng_engine, num_it = 30){
  result <- data.frame()
  for(i in size_vec){
    for(j in seq_len(num_it)){
      x <- rng_engine(i, 5)
      y <- rng_engine(i, 10)
      outer_res <- as.data.frame(t(as.data.frame(system.time(outer_hle2(x, y))))) %>%
        select(1:3) %>% 
        cbind(data.frame(method = "outer", size = i))
      cpp_res <- as.data.frame(t(as.data.frame(system.time(cpp_hle2(x, y))))) %>% 
        select(1:3) %>% 
        cbind((data.frame(method = "C++", size = i)))
      results <- rbind(outer_res, cpp_res)
      result <- rbind(result, results)
    }
  }
  return(result)
}
```
# Timing
With the initial setup out of the way, we can actually run the timings. The two distributions I will be using are the Normal (`rnorm`) and
the exponential (`rexp`). On top of this, I will do 30 iterations of vector sizes from 10 to 10000.
```{r}
size_vec <- c(10, 100, 1000, 10000)

```

```{r}
HLE1 <- hle1_timing(size_vec, rexp)
HLE2 <- hle2_timing(size_vec, rexp)
```


